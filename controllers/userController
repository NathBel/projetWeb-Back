const User = require('../models/userModel');
const hash = require("../services/hashPassword-service.js");
const jwt = require("../services/jwt-service.js");

// Create and Save a new User
exports.create = (req, res) => {

    // Validate request
    if (!req.body) {
        res.status(400).send({
            message: "Content can not be empty!"
        });
    }

    // Create a User
    const user = new User({
        firstname: req.body.firstname,
        lastname: req.body.lastname,
        email: req.body.email,
        password: req.body.password,
        // isAdmin: req.body.isAdmin
    });

    // Save User in the database
    User.create(user, (err, data) => {
        if (err) {
            if (err.kind === "email_cannot_be_null") {
                res.status(404).send({
                    message: `email format is not valid.`
                });
            } else {
                res.status(500).send({
                    message: "Some error occurred while creating the User."
                });
            }
        }
        else res.send(data);
    });
};

// Retrieve all Users from the database.
exports.getAll = (req, res) => {
    User.getAll((err, data) => {
        if (err) 
            res.status(500).send({
                message:
                    err.message || "Some error occurred while retrieving users."
            });
        else res.send(data);
    });
};

// Find a single User with a id_user
exports.findById = (req, res) => {
    User.findById(req.params.id_user, (err, data) => {
        if (err) {
            if (err.kind === "not_found") {
                res.status(404).send({
                    message: `Not found User with id ${req.params.id_user}.`
                });
            } else {
                res.status(500).send({
                    message: "Error retrieving User with id " + req.params.id_user
                });
            }
        } else res.send(data);
    });
};

//Find user by email
exports.findByEmail = (req, res) => {
    User.findByEmail(req.params.email, (err, data) => {
        if (err) {
            if (err.kind === "not_found") {
                res.status(404).send({
                    message: `Not found User with email ${req.params.email}.`
                });
            } else {
                res.status(500).send({
                    message: "Error retrieving User with email " + req.params.email
                });
            }
        } else res.send(data);
    });
};

// login a single User with a userEmail and password
exports.login = (req, res) => {
    console.log(req.body.userEmail);
    User.login(req.body.userEmail, async (err, data) => {
        if (err) {
            if (err.kind === "not_found") {
                res.status(404).send({
                    message: `Not found User with email ${req.params.userEmail}.`
                });
            } else {
                res.status(500).send({
                    message: "Error retrieving User with id " + req.params.userEmail
                });
            }
        } else {
            // if(hash.comparePassword(hash.decryptPassword(req.body.password), data.password)) {
            if(hash.comparePassword(req.body.password, data.password)) {    
                const token = await jwt.generateToken(data.idUser, data.firstname, data.lastname, data.email, data.password, data.role);
                res.json({ 'token': token });
            } 
            else {
                res.status(500).send({
                    message: "password incorrect"
                });
            }  
        };
    });
};

// Update a User identified by the id_user in the request
exports.updateById = (req, res) => {
    // Validate Request
    if (!req.body) {
        res.status(400).send({
            message: "Content can not be empty!"
        });
    }

    User.updateById(
        req.params.id_user,
        req.body,
        (err, data) => {
            if (err) {
                if (err.kind === "not_found") {
                    res.status(404).send({
                        message: `Not found User with id ${req.params.id_user}.`
                    });
                } else {
                    res.status(500).send({
                        message: "Error updating User with id " + req.params.id_user
                    });
                }
            } else res.send(data);
        }
    );
};

// Delete a User with the specified id_user in the request
exports.delete = (req, res) => {
    User.remove(req.params.id_user, (err, data) => {
        if (err) {
            if (err.kind === "not_found") {
                res.status(404).send({
                    message: `Not found User with id ${req.params.id_user}.`
                });
            } else {
                res.status(500).send({
                    message: "Could not delete User with id " + req.params.id_user
                });
            }
        } else res.send({ message: `User was deleted successfully!` });
    });
};






// const asyncHandler = require("express-async-handler");
// const User = require("../models/userModel");
// const jwt = require("jsonwebtoken");
// const bcrypt = require("bcrypt");
// const CryptoJS = require("crypto-js");

// //@desc Register a user
// //@route POST /api/user/register
// //@access public
// const registerUser = asyncHandler(async (req, res) => {
//     const { username, email, encryptedPassword } = req.body;
//     const bytes  = CryptoJS.AES.decrypt(encryptedPassword, 'secret key 123');
//     const password = bytes.toString(CryptoJS.enc.Utf8);

//     if (!username || !email || !password) {
//         res.status(400);
//         throw new Error("All fields are mandatory");
//     }
//     const userAvailable = await User.findOne({ email });
//     if (userAvailable) {
//         res.status(400);
//         throw new Error("User already created");
//     }

//     //Hash pswd
//     const hashedPassword = await bcrypt.hash(password, 10);
//     console.log("hashed pswd: ", hashedPassword);
//     const newUser = await User.create({
//         username,
//         email,
//         password: hashedPassword,
//     });

//     console.log(`user created: ${newUser}`);
//     if (newUser) {
//         res.status(201).json({ idUser: newUser.id, email: newUser.email });
//     } else {
//         res.status(400);
//         throw new Error("User data is not valid");
//     }
//     res.json({ message: "User registration" });
// });

// //@desc Log a user in
// //@route POST /api/user/login
// //@access public
// const loginUser = asyncHandler(async (req, res) => {
//     const { email, encryptedPassword } = req.body;
//     const bytes  = CryptoJS.AES.decrypt(encryptedPassword, 'secret key 123');
//     const originalPassword = bytes.toString(CryptoJS.enc.Utf8);
//     console.log("crypté back: ", encryptedPassword);
//     console.log("décrypté back: ", originalPassword);

//     if (!email || !originalPassword) {
//         res.status(400);
//         throw new Error("All fields are mandatory");
//     }
//     const user = await User.findOne({ email });

//     //compare pswd with hashed
//     if (user && (await bcrypt.compare(originalPassword, user.password))) {
//         const accessToken = jwt.sign({
//             user: {
//                 // username: user.username,
//                 email: user.email,
//                 idUser: user.id,
//             },
//         }, process.env.ACCESS_TOKEN_SECERT,
//             { expiresIn: "200m" }
//         );
//         res.status(200).json({ accessToken });
//     } else {
//         res.status(401);
//         throw new Error("email or password is not valid");
//     }
// });

// //@desc Log a user out
// //@route POST /api/user/logout
// //@access private
// const logoutUser = asyncHandler(async (req, res) => {
//     try {
//         // Assuming the user's token is stored in the 'req.user' object
//         const token = localStorage.getItem('accessToken');
//         // Invalidate the token
//         jwt.verify(token, process.env.ACCESS_TOKEN_SECERT, (err, user) => {
//             if (err) {
//                 res.status(403);
//                 throw new Error('Invalid token');
//             }
//             // Invalidate the token
//             jwt.sign(user, process.env.ACCESS_TOKEN_SECERT, { expiresIn: '0s' });
//             res.status(200).json({ message: 'User logged out successfully' });
//         });
//     } catch (error) {
//         res.status(500).json({ error: 'Error logging out' });
//     }
// });


// //@desc Current user info
// //@route POST /api/user/current
// //@access private
// const currentUser = asyncHandler(async (req, res) => {
//     res.json(req.user);
// });

// module.exports = { registerUser, loginUser, logoutUser, currentUser };







// exports.getAllUsers = async (req, res) => {
//     const users = await User.findAll();
//     res.json(users);
// };

// exports.getUserById = async (req, res) => {
//     const user = await User.findByPk(req.params.id);

//     if (user) {
//         res.json(user);
//     } else {
//         res.status(404).json({ message: 'User not found' });
//     }
// };